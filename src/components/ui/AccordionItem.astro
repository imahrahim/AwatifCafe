---
type Props = {
  index: number;
  title: string;
  description?: string;
  coverImage?: string;
  itemImageByName?: Record<string, string>;
  items: {
    category: string;
    priceLabels?: string[];
    items?: ({
      name: string;
      price: string;
      description?: string;
    } | {
      name: string;
      prices: string[];
      description?: string;
    })[];
    subcategories?: {
      category: string;
      items: {
        name: string;
        price: string;
        description?: string;
      }[];
    }[];
  }[];
};

const { index, title, description, items, coverImage, itemImageByName } = Astro.props;
---

<div
  id="accordion__item"
  class="accordion__item relative group h-[150px] bg-[#F3F3F3] overflow-hidden w-full transition-all duration-500 mb-[10px] rounded-[4px] border border-dark shadow-[5px_5px_0px_#673606]"
>
  {coverImage && (
  <img 
  src={coverImage} 
  alt="Cover"
  class="absolute right-3 sm:right-6 w-28 sm:w-40 max-w-[160px] sm:max-w-[180px] h-auto object-contain opacity-100 z-0 pointer-events-none transition-all duration-300 ease-in-out"
  style="top: -30px"
/>
  )}

  <button
    class="accordion__toggle w-full h-[160px] flex items-center justify-between p-[20px] cursor-pointer"
    id={`${title}-accordion-toggle`}
    aria-expanded="false"
    aria-controls={`${title}-accordion-content`}
  >
    <div class="flex flex-col sm:flex-row sm:items-center gap-2 sm:gap-[25px] text-left">
      <span class="text-xl font-bold">{title}</span>
      {description && (
        <p class="text-sm text-gray-500 leading-tight sm:ml-4 sm:mt-0 mt-1">
          {description}
        </p>
      )}
    </div>
    <div class="accordion__icon relative w-4 h-4 ml-auto mr-[5px]" aria-hidden="true"></div>
  </button>

  <div
    id={`${title}-accordion-content`}
    aria-labelledby={`${title}-accordion-toggle`}
    class="accordion__content px-[20px]"
  >

    <div class="w-full h-[1.5px] bg-[#673606] mb-4"></div>

      <div class="flex justify-end -mt-2 mb-0">
  <span class="text-sm font-semibold text-[#673606]">RM</span>
</div>

    {items.map((group) => (
      <div class="mb-6">
        {group.category && (
          <h4 class="font-bold text-lg mb-2 text-inherit">{group.category}</h4>
        )}

        {Array.isArray(group.items) ? (
          group.priceLabels && group.priceLabels.length > 1 ? (
            <>
              <div class="flex justify-end gap-10 text-sm italic font-semibold text-right mt-1 mb-1 pr-2">
                {group.priceLabels.map((label) => (
                  <span>{label}</span>
                ))}
              </div>

              <ul class="grid gap-2 text-base">
                {group.items.map((entry) => (
                  <li class="border-b border-black/10 pb-2">
                    <div class="flex flex-col">
                      <div class="flex justify-between gap-10">
                        <span>{entry.name}</span>
                        {"prices" in entry ? (
                          <div class="flex gap-10 font-semibold justify-end min-w-[80px]">
                            <span class="w-[30px] text-right">{entry.prices[0]}</span>
                            <span class="w-[30px] text-right">{entry.prices[1]}</span>
                          </div>
                        ) : (
                          <span class="font-semibold">{entry.price}</span>
                        )}
                      </div>
                      {entry.description && (
                        <div class="text-xs text-gray-500 mt-0.5">{entry.description}</div>
                      )}
                      {entry.name && itemImageByName?.[entry.name] && (
                        <img
                          src={itemImageByName[entry.name]}
                          alt={entry.name}
                          class="menu-item-image"
                        />
                      )}
                    </div>
                  </li>
                ))}
              </ul>
            </>
          ) : (
            <ul class="grid gap-2 text-base">
              {group.items.map((entry) => (
                <li class="border-b border-black/10 pb-2">
                  <div class="flex flex-col">
                    <div class="flex justify-between">
                      <span>{entry.name}</span>
                      <span class="font-semibold">
                        {"price" in entry ? entry.price : entry.prices?.[0] ?? ""}
                      </span>
                    </div>
                    {entry.description && (
                      <div class="text-xs text-gray-500 mt-0.5">{entry.description}</div>
                    )}
                    {entry.name && itemImageByName?.[entry.name] && (
                      <img
                        src={itemImageByName[entry.name]}
                        alt={entry.name}
                        class="menu-item-image"
                      />
                    )}
                  </div>
                </li>
              ))}
            </ul>
          )
        ) : group.subcategories ? (
          <div class="grid gap-4">
            {group.subcategories.map((sub) => (
              <div>
                <h5 class="text-base font-italic mb-1">{sub.category}</h5>
                <ul class="grid gap-1 text-sm border-l pl-4 border-black/10">
                  {sub.items.map((entry) => (
                    <li class="flex justify-between text-sm">
                      <span>{entry.name}</span>
                      <span class="font-semibold">{entry.price}</span>
                    </li>
                  ))}
                </ul>
              </div>
            ))}
          </div>
        ) : null}
      </div>
    ))}
  </div>
</div>

<style>
.accordion__item {
  transition: background-color 0.4s ease, color 0.4s ease;
  background-color: rgba(247, 255, 252, 0.41);
  color: #673606;
}
.accordion__item.active {
  background-color:rgba(89, 255, 197, 0.45) !important;
  color: #673606 !important;
}
.accordion__icon {
  position: relative;
  width: 1rem;
  height: 1rem;
}
.accordion__icon::before,
.accordion__icon::after {
  content: "";
  position: absolute;
  background-color: #402a1c;
  transition: opacity 0.3s ease;
}
.accordion__icon::before {
  width: 100%;
  height: 1px;
  top: 50%;
  left: 0;
  transform: translateY(-50%);
}
.accordion__icon::after {
  width: 1px;
  height: 100%;
  top: 0;
  left: 50%;
  transform: translateX(-50%);
}
.accordion__icon.collapsed::after {
  opacity: 0;
}
.menu-item-image {
  width: 15rem;
  height: auto;
  object-fit: cover;
  border-radius: 0.5rem;
  margin-top: 0.75rem;
  margin-left: auto;
}
.price {
  font-style: normal;
  font-weight: 500;
  font-size: 0.95rem;
}
</style>

<script>
function accordionSetup() {
  const accordionItems = document.querySelectorAll(".accordion__item");

  accordionItems.forEach((item) => {
    const toggle = item.querySelector(".accordion__toggle");
    const icon = item.querySelector(".accordion__icon");

    if (!(toggle instanceof HTMLElement) || !(icon instanceof HTMLElement)) return;

    toggle.addEventListener("click", (e) => {
      e.preventDefault();
      e.stopPropagation();

      const isActive = item.classList.contains("active");

      // Schließe andere Accordion-Items
      accordionItems.forEach((other) => {
        if (other !== item && other.classList.contains("active")) {
          const otherToggle = other.querySelector(".accordion__toggle");
          const otherIcon = other.querySelector(".accordion__icon");

          if (
            otherToggle instanceof HTMLElement &&
            otherIcon instanceof HTMLElement &&
            other instanceof HTMLElement
          ) {
            other.classList.remove("active");
            otherToggle.setAttribute("aria-expanded", "false");
            other.style.height = "160px";
            otherIcon.classList.remove("rotate-180", "collapsed");
          }
        }
      });

      if (!isActive) {
        item.classList.add("active");
        toggle.setAttribute("aria-expanded", "true");

        if (item instanceof HTMLElement) {
          item.style.height = item.scrollHeight + "px";
        }

        icon.classList.add("rotate-180", "collapsed");

        // Scroll zum neuen aktiven AccordionItem
        setTimeout(() => {
          const offset = 80;
          const rect = item.getBoundingClientRect();
          const scrollToY = window.scrollY + rect.top - offset;
          window.scrollTo({ top: scrollToY, behavior: "smooth" });
        }, 400); // CSS-Transition berücksichtigen
      } else {
        item.classList.remove("active");
        toggle.setAttribute("aria-expanded", "false");
        icon.classList.remove("rotate-180", "collapsed");
        if (item instanceof HTMLElement) {
          item.style.height = "160px";
        }
      }
    });
  });

  // Schließen bei Klick außerhalb eines offenen AccordionItems
  document.addEventListener("click", (event) => {
    const target = event.target;
    if (!(target instanceof Node)) return;

    accordionItems.forEach((item) => {
      const toggle = item.querySelector(".accordion__toggle");
      const icon = item.querySelector(".accordion__icon");

      if (
        toggle instanceof HTMLElement &&
        icon instanceof HTMLElement &&
        !item.contains(target)
      ) {
        item.classList.remove("active");
        toggle.setAttribute("aria-expanded", "false");
        if (item instanceof HTMLElement) {
          item.style.height = "160px";
        }
        icon.classList.remove("rotate-180", "collapsed");
      }
    });
  });
}

accordionSetup();
document.addEventListener("astro:after-swap", accordionSetup);
</script>