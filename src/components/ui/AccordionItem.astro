---
type Props = {
  index: number;
  title: string;
  description?: string;
  coverImage?: string;
  items: {
    category: string;
    priceLabels?: string[];
    items?: ({
      name: string;
      price: string;
      description?: string;
    } | {
      name: string;
      prices: string[];
      description?: string;
    })[];
    subcategories?: {
      category: string;
      items: {
        name: string;
        price: string;
        description?: string;
      }[];
    }[];
  }[];
};

const { index, title, description, items, coverImage } = Astro.props;
---

<div
  id="accordion__item"
  class="accordion__item relative group h-[150px] bg-[#F3F3F3] overflow-hidden w-full transition-all duration-500 mb-[30px] rounded-[4px] border border-dark shadow-[5px_5px_0px_#673606]"
>
{coverImage && (
  <img 
    src={coverImage} 
    alt="Cover"
    class="absolute right-3 w-40 max-w-[180px] h-auto object-contain opacity-90 z-0 pointer-events-none"
    style="top: -50px"
  />
)}

  <button
    class="accordion__toggle w-full h-[160px] flex items-center justify-between p-[20px] cursor-pointer"
    id={`${title} accordion__item menu button`}
    aria-expanded="false"
    aria-controls={`${title} accordion__item menu content`}
  >
    <div class="flex flex-col sm:flex-row sm:items-center gap-2 sm:gap-[25px] text-left">
      <div class="flex items-center gap-2 sm:gap-[5px]">
        <span class="text-xl font-bold">{title}</span>
      </div>
      {description && (
        <p class="text-sm text-gray-500 leading-tight sm:ml-4 sm:mt-0 mt-1">
          {description}
        </p>
      )}
    </div>
    <div class="accordion__icon relative w-4 h-4 ml-auto mr-[5px]" aria-hidden="true"></div>
  </button>

  <div
    id={`${title} accordion__item menu content`}
    aria-labelledby={`${title} accordion__item menu button `}
    class="accordion__content px-[20px]"
  >
    <div class="w-full h-[1.5px] bg-[#673606] mb-4"></div>

    {items && items.map((group) => (
      <div class="mb-6">
        <h4 class="font-bold text-lg mb-2 text-inherit">{group.category}</h4>

        {group.items ? (
          group.priceLabels && group.priceLabels.length > 1 ? (
            <>
              <div class="flex justify-end gap-10 text-sm italic font-semibold text-right mt-1 mb-1 pr-2">
                {group.priceLabels.map((label) => (
                  <span>{label}</span>
                ))}
              </div>
              <ul class="grid gap-2 text-base">
                {group.items.map((entry) => (
                  <li class="border-b border-black/10 pb-2">
                    <div class="flex justify-between gap-10">
                      <span>{entry.name}</span>
                      {"prices" in entry ? (
                        <div class="flex gap-10 font-semibold italic justify-end min-w-[80px]">
                          <span class="w-[30px] text-right">{entry.prices[0]}</span>
                          <span class="w-[30px] text-right">{entry.prices[1]}</span>
                        </div>
                      ) : (
                        <span class="font-semibold">{entry.price}</span>
                      )}
                    </div>
                    {entry.description && (
                      <div class="text-xs text-gray-500 mt-0.5">{entry.description}</div>
                    )}
                  </li>
                ))}
              </ul>
            </>
          ) : (
            <ul class="grid gap-2 text-base">
              {group.items.map((entry) => (
                <li class="border-b border-black/10 pb-2">
                  <div class="flex justify-between">
                    <span>{entry.name}</span>
                    <span class="font-semibold">
                      {"price" in entry ? entry.price : entry.prices?.[0] ?? ""}
                    </span>
                  </div>
                  {entry.description && (
                    <div class="text-xs text-gray-500 mt-0.5">{entry.description}</div>
                  )}
                </li>
              ))}
            </ul>
          )
        ) : group.subcategories ? (
          <div class="grid gap-4">
            {group.subcategories.map((sub) => (
              <div>
                <h5 class="text-base font-italic mb-1">{sub.category}</h5>
                <ul class="grid gap-1 text-sm border-l pl-4 border-black/10">
                  {sub.items.map((entry) => (
                    <li class="flex justify-between text-sm">
                      <span>{entry.name}</span>
                      <span class="font-semibold">{entry.price}</span>
                    </li>
                  ))}
                </ul>
              </div>
            ))}
          </div>
        ) : null}
      </div>
    ))}
  </div>
</div>

<style>
.accordion__item {
  transition: background-color 0.4s ease, color 0.4s ease;
  background-color: rgba(248, 195, 218, 0.37);
  color: #673606;
}

.accordion__item.active {
  background-color: #f8c3da !important;
  color: #673606 !important;
}

.accordion__icon {
  position: relative;
  width: 1rem;
  height: 1rem;
}

.accordion__icon::before,
.accordion__icon::after {
  content: "";
  position: absolute;
  background-color: #402a1c;
  transition: opacity 0.3s ease;
}

.accordion__icon::before {
  width: 100%;
  height: 1px;
  top: 50%;
  left: 0;
  transform: translateY(-50%);
}

.accordion__icon::after {
  width: 1px;
  height: 100%;
  top: 0;
  left: 50%;
  transform: translateX(-50%);
}

.accordion__icon.collapsed::after {
  opacity: 0;
}
</style>

<script>
  function accordionSetup() {
    const accordionItems = document.querySelectorAll(".accordion__item");

    accordionItems.forEach((accordionItem) => {
      const accordionToggle = accordionItem.querySelector(".accordion__toggle");
      const accordionIcon = accordionItem.querySelector(".accordion__icon");

      if (accordionToggle && accordionIcon) {
        accordionToggle.addEventListener("click", (e) => {
          e.stopPropagation();

          accordionItems.forEach((otherItem) => {
            if (otherItem !== accordionItem && otherItem.classList.contains("active")) {
              const otherToggle = otherItem.querySelector(".accordion__toggle");
              const otherIcon = otherItem.querySelector(".accordion__icon");

              if (otherToggle && otherIcon) {
                otherItem.classList.remove("active", "bg-green");
                otherToggle.setAttribute("aria-expanded", "false");
                otherItem.style.height = "160px";
                otherIcon.classList.remove("rotate-180", "collapsed");
              }
            }
          });

          if (!accordionItem.classList.contains("active")) {
            accordionItem.classList.add("active", "bg-green");
            accordionToggle.setAttribute("aria-expanded", "true");
            accordionItem.style.height = accordionItem.scrollHeight + "px";
            accordionIcon.classList.add("rotate-180", "collapsed");
          } else {
            accordionItem.classList.remove("active", "bg-green");
            accordionToggle.setAttribute("aria-expanded", "false");
            accordionItem.style.height = "160px";
            accordionIcon.classList.remove("rotate-180", "collapsed");
          }

          e.preventDefault();
          return false;
        });
      }
    });

    document.addEventListener("click", (event) => {
      accordionItems.forEach((accordionItem) => {
        const accordionToggle = accordionItem.querySelector(".accordion__toggle");
        const accordionIcon = accordionItem.querySelector(".accordion__icon");

        if (
          accordionToggle &&
          accordionIcon &&
          !accordionItem.contains(event.target)
        ) {
          accordionItem.classList.remove("active", "bg-green");
          accordionToggle.setAttribute("aria-expanded", "false");
          accordionItem.style.height = "160px";
          accordionIcon.classList.remove("rotate-180", "collapsed");
        }
      });
    });
  }

  accordionSetup();
  document.addEventListener("astro:after-swap", accordionSetup);
</script>